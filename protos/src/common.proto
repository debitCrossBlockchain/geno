syntax = "proto3";

message ProtocolsMessage {
  ProtocolsMessageType msg_type = 1; 
  ProtocolsActionMessageType action = 2;
  uint64 sequence = 3;
  bytes data = 4;
  int64 timestamp = 5;
  repeated string route = 6;
  string hash = 7;
}

enum ProtocolsActionMessageType {
  BROADCAST = 0;
  REQUEST = 1;
  RESPONSE = 2;    
}

enum ProtocolsMessageType{
  NONE = 0;
  HELLO = 1;
  PING = 2;
  PEERS = 3;
  TRANSACTION = 4;
  SYNCCHAIN = 5;
  CONSENSUS = 6;
  LEDGER_UPGRADE_NOTIFY = 7; 
  LIGHT = 8;
  TRANSACTION_SYNC = 9;
  SYNCBLOCK = 10;
}

//for ping messsage
message Ping {
  int64 nonce = 1;
}

//for pong message
message Pong {
  int64 nonce = 1;
}

//for peers message
message Peer {
  string address = 1;  
  int64 num_failures = 2;
  int64 next_attempt_time =3;
  int64 active_time = 4;
  int64 connection_id =5;
}

message Peers {
  repeated Peer peers = 1;
}

message KeyPair{
	bytes key = 1;
	bytes value = 2;
	uint64 version = 3;
  string value_type = 4;
  bool encoded =6;
}

message KeyValuePair {
  string key = 1;
  bytes value = 2;
}

message Signature {
  bytes public_key = 1;
  bytes sign_data = 2;
  string encryption_type = 3;
}

message Validator {
  string address = 1;
  int64 pledge_amount = 2;
}

message ValidatorSet {
  uint64 epoch = 1;
  repeated Validator validators = 2;
}

//for key value db storage
message EntryList{
	repeated bytes entry = 1;
}

message HelloMessage {
  uint64 network_id = 1;
  uint64 ledger_version = 2;
  uint64 network_version = 3;
  string chain_version = 4;
  int64 listening_port = 5;
  string node_address = 6;
  string node_rand = 7;
  string chain_id = 8;
  string chain_hub = 9;
  string license = 10;
}

message HelloResponseMessage {
  int32 err_code = 1;
  string err_desc = 2;
}


message TransactionResult {
  int32  err_code = 1;
  string message = 2;
  ContractResult contract_result = 3;
  uint64 gas_used = 4;
  uint64 block_height = 5;
  bytes  block_hash = 6;
  uint32 index = 7;
}

message ContractResult {
  int32 err_code = 1;
  bytes result = 2;
  string message = 3;
  repeated ContractEvent contract_event = 4;
}

// contract event saved in block chain
message ContractEvent {
  // contract that emitted this log
  string  address = 1;
  repeated string topic = 2;
  repeated string data = 3;
}