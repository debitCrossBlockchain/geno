// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `ledger.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct LedgerHeader {
    // message fields
    pub height: u64,
    pub hash: ::std::vec::Vec<u8>,
    pub previous_hash: ::std::vec::Vec<u8>,
    pub state_hash: ::std::vec::Vec<u8>,
    pub transactions_hash: ::std::vec::Vec<u8>,
    pub receips_hash: ::std::vec::Vec<u8>,
    pub timestamp: i64,
    pub version: u64,
    pub tx_count: u64,
    pub total_tx_count: u64,
    pub validators_hash: ::std::vec::Vec<u8>,
    pub fees_hash: ::std::vec::Vec<u8>,
    pub hub_id: ::std::string::String,
    pub chain_id: ::std::string::String,
    pub proposer: ::std::string::String,
    pub extended_data: ::protobuf::SingularPtrField<ExtendedData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LedgerHeader {
    fn default() -> &'a LedgerHeader {
        <LedgerHeader as ::protobuf::Message>::default_instance()
    }
}

impl LedgerHeader {
    pub fn new() -> LedgerHeader {
        ::std::default::Default::default()
    }

    // uint64 height = 1;


    pub fn get_height(&self) -> u64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: u64) {
        self.height = v;
    }

    // bytes hash = 2;


    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash, ::std::vec::Vec::new())
    }

    // bytes previous_hash = 3;


    pub fn get_previous_hash(&self) -> &[u8] {
        &self.previous_hash
    }
    pub fn clear_previous_hash(&mut self) {
        self.previous_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_previous_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.previous_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_previous_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.previous_hash
    }

    // Take field
    pub fn take_previous_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.previous_hash, ::std::vec::Vec::new())
    }

    // bytes state_hash = 4;


    pub fn get_state_hash(&self) -> &[u8] {
        &self.state_hash
    }
    pub fn clear_state_hash(&mut self) {
        self.state_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_state_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.state_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_state_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.state_hash
    }

    // Take field
    pub fn take_state_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.state_hash, ::std::vec::Vec::new())
    }

    // bytes transactions_hash = 5;


    pub fn get_transactions_hash(&self) -> &[u8] {
        &self.transactions_hash
    }
    pub fn clear_transactions_hash(&mut self) {
        self.transactions_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactions_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.transactions_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transactions_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.transactions_hash
    }

    // Take field
    pub fn take_transactions_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.transactions_hash, ::std::vec::Vec::new())
    }

    // bytes receips_hash = 6;


    pub fn get_receips_hash(&self) -> &[u8] {
        &self.receips_hash
    }
    pub fn clear_receips_hash(&mut self) {
        self.receips_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_receips_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.receips_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_receips_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.receips_hash
    }

    // Take field
    pub fn take_receips_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.receips_hash, ::std::vec::Vec::new())
    }

    // int64 timestamp = 7;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = v;
    }

    // uint64 version = 8;


    pub fn get_version(&self) -> u64 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u64) {
        self.version = v;
    }

    // uint64 tx_count = 9;


    pub fn get_tx_count(&self) -> u64 {
        self.tx_count
    }
    pub fn clear_tx_count(&mut self) {
        self.tx_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_tx_count(&mut self, v: u64) {
        self.tx_count = v;
    }

    // uint64 total_tx_count = 10;


    pub fn get_total_tx_count(&self) -> u64 {
        self.total_tx_count
    }
    pub fn clear_total_tx_count(&mut self) {
        self.total_tx_count = 0;
    }

    // Param is passed by value, moved
    pub fn set_total_tx_count(&mut self, v: u64) {
        self.total_tx_count = v;
    }

    // bytes validators_hash = 11;


    pub fn get_validators_hash(&self) -> &[u8] {
        &self.validators_hash
    }
    pub fn clear_validators_hash(&mut self) {
        self.validators_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_validators_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.validators_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validators_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.validators_hash
    }

    // Take field
    pub fn take_validators_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.validators_hash, ::std::vec::Vec::new())
    }

    // bytes fees_hash = 12;


    pub fn get_fees_hash(&self) -> &[u8] {
        &self.fees_hash
    }
    pub fn clear_fees_hash(&mut self) {
        self.fees_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_fees_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.fees_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_fees_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.fees_hash
    }

    // Take field
    pub fn take_fees_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.fees_hash, ::std::vec::Vec::new())
    }

    // string hub_id = 13;


    pub fn get_hub_id(&self) -> &str {
        &self.hub_id
    }
    pub fn clear_hub_id(&mut self) {
        self.hub_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_hub_id(&mut self, v: ::std::string::String) {
        self.hub_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hub_id(&mut self) -> &mut ::std::string::String {
        &mut self.hub_id
    }

    // Take field
    pub fn take_hub_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hub_id, ::std::string::String::new())
    }

    // string chain_id = 14;


    pub fn get_chain_id(&self) -> &str {
        &self.chain_id
    }
    pub fn clear_chain_id(&mut self) {
        self.chain_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_chain_id(&mut self, v: ::std::string::String) {
        self.chain_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chain_id(&mut self) -> &mut ::std::string::String {
        &mut self.chain_id
    }

    // Take field
    pub fn take_chain_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.chain_id, ::std::string::String::new())
    }

    // string proposer = 15;


    pub fn get_proposer(&self) -> &str {
        &self.proposer
    }
    pub fn clear_proposer(&mut self) {
        self.proposer.clear();
    }

    // Param is passed by value, moved
    pub fn set_proposer(&mut self, v: ::std::string::String) {
        self.proposer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_proposer(&mut self) -> &mut ::std::string::String {
        &mut self.proposer
    }

    // Take field
    pub fn take_proposer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.proposer, ::std::string::String::new())
    }

    // .ExtendedData extended_data = 16;


    pub fn get_extended_data(&self) -> &ExtendedData {
        self.extended_data.as_ref().unwrap_or_else(|| <ExtendedData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_extended_data(&mut self) {
        self.extended_data.clear();
    }

    pub fn has_extended_data(&self) -> bool {
        self.extended_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_extended_data(&mut self, v: ExtendedData) {
        self.extended_data = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_extended_data(&mut self) -> &mut ExtendedData {
        if self.extended_data.is_none() {
            self.extended_data.set_default();
        }
        self.extended_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_extended_data(&mut self) -> ExtendedData {
        self.extended_data.take().unwrap_or_else(|| ExtendedData::new())
    }
}

impl ::protobuf::Message for LedgerHeader {
    fn is_initialized(&self) -> bool {
        for v in &self.extended_data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.height = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.previous_hash)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.state_hash)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.transactions_hash)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.receips_hash)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.version = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.tx_count = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.total_tx_count = tmp;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.validators_hash)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.fees_hash)?;
                },
                13 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hub_id)?;
                },
                14 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.chain_id)?;
                },
                15 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.proposer)?;
                },
                16 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.extended_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(1, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.hash);
        }
        if !self.previous_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.previous_hash);
        }
        if !self.state_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.state_hash);
        }
        if !self.transactions_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.transactions_hash);
        }
        if !self.receips_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.receips_hash);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(7, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(8, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tx_count != 0 {
            my_size += ::protobuf::rt::value_size(9, self.tx_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.total_tx_count != 0 {
            my_size += ::protobuf::rt::value_size(10, self.total_tx_count, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.validators_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(11, &self.validators_hash);
        }
        if !self.fees_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(12, &self.fees_hash);
        }
        if !self.hub_id.is_empty() {
            my_size += ::protobuf::rt::string_size(13, &self.hub_id);
        }
        if !self.chain_id.is_empty() {
            my_size += ::protobuf::rt::string_size(14, &self.chain_id);
        }
        if !self.proposer.is_empty() {
            my_size += ::protobuf::rt::string_size(15, &self.proposer);
        }
        if let Some(ref v) = self.extended_data.as_ref() {
            let len = v.compute_size();
            my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.height != 0 {
            os.write_uint64(1, self.height)?;
        }
        if !self.hash.is_empty() {
            os.write_bytes(2, &self.hash)?;
        }
        if !self.previous_hash.is_empty() {
            os.write_bytes(3, &self.previous_hash)?;
        }
        if !self.state_hash.is_empty() {
            os.write_bytes(4, &self.state_hash)?;
        }
        if !self.transactions_hash.is_empty() {
            os.write_bytes(5, &self.transactions_hash)?;
        }
        if !self.receips_hash.is_empty() {
            os.write_bytes(6, &self.receips_hash)?;
        }
        if self.timestamp != 0 {
            os.write_int64(7, self.timestamp)?;
        }
        if self.version != 0 {
            os.write_uint64(8, self.version)?;
        }
        if self.tx_count != 0 {
            os.write_uint64(9, self.tx_count)?;
        }
        if self.total_tx_count != 0 {
            os.write_uint64(10, self.total_tx_count)?;
        }
        if !self.validators_hash.is_empty() {
            os.write_bytes(11, &self.validators_hash)?;
        }
        if !self.fees_hash.is_empty() {
            os.write_bytes(12, &self.fees_hash)?;
        }
        if !self.hub_id.is_empty() {
            os.write_string(13, &self.hub_id)?;
        }
        if !self.chain_id.is_empty() {
            os.write_string(14, &self.chain_id)?;
        }
        if !self.proposer.is_empty() {
            os.write_string(15, &self.proposer)?;
        }
        if let Some(ref v) = self.extended_data.as_ref() {
            os.write_tag(16, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LedgerHeader {
        LedgerHeader::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "height",
                |m: &LedgerHeader| { &m.height },
                |m: &mut LedgerHeader| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "hash",
                |m: &LedgerHeader| { &m.hash },
                |m: &mut LedgerHeader| { &mut m.hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "previous_hash",
                |m: &LedgerHeader| { &m.previous_hash },
                |m: &mut LedgerHeader| { &mut m.previous_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "state_hash",
                |m: &LedgerHeader| { &m.state_hash },
                |m: &mut LedgerHeader| { &mut m.state_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "transactions_hash",
                |m: &LedgerHeader| { &m.transactions_hash },
                |m: &mut LedgerHeader| { &mut m.transactions_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "receips_hash",
                |m: &LedgerHeader| { &m.receips_hash },
                |m: &mut LedgerHeader| { &mut m.receips_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timestamp",
                |m: &LedgerHeader| { &m.timestamp },
                |m: &mut LedgerHeader| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "version",
                |m: &LedgerHeader| { &m.version },
                |m: &mut LedgerHeader| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "tx_count",
                |m: &LedgerHeader| { &m.tx_count },
                |m: &mut LedgerHeader| { &mut m.tx_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "total_tx_count",
                |m: &LedgerHeader| { &m.total_tx_count },
                |m: &mut LedgerHeader| { &mut m.total_tx_count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "validators_hash",
                |m: &LedgerHeader| { &m.validators_hash },
                |m: &mut LedgerHeader| { &mut m.validators_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "fees_hash",
                |m: &LedgerHeader| { &m.fees_hash },
                |m: &mut LedgerHeader| { &mut m.fees_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hub_id",
                |m: &LedgerHeader| { &m.hub_id },
                |m: &mut LedgerHeader| { &mut m.hub_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "chain_id",
                |m: &LedgerHeader| { &m.chain_id },
                |m: &mut LedgerHeader| { &mut m.chain_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "proposer",
                |m: &LedgerHeader| { &m.proposer },
                |m: &mut LedgerHeader| { &mut m.proposer },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ExtendedData>>(
                "extended_data",
                |m: &LedgerHeader| { &m.extended_data },
                |m: &mut LedgerHeader| { &mut m.extended_data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LedgerHeader>(
                "LedgerHeader",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LedgerHeader {
        static instance: ::protobuf::rt::LazyV2<LedgerHeader> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LedgerHeader::new)
    }
}

impl ::protobuf::Clear for LedgerHeader {
    fn clear(&mut self) {
        self.height = 0;
        self.hash.clear();
        self.previous_hash.clear();
        self.state_hash.clear();
        self.transactions_hash.clear();
        self.receips_hash.clear();
        self.timestamp = 0;
        self.version = 0;
        self.tx_count = 0;
        self.total_tx_count = 0;
        self.validators_hash.clear();
        self.fees_hash.clear();
        self.hub_id.clear();
        self.chain_id.clear();
        self.proposer.clear();
        self.extended_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LedgerHeader {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LedgerHeader {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Ledger {
    // message fields
    pub header: ::protobuf::SingularPtrField<LedgerHeader>,
    pub transaction_signs: ::protobuf::RepeatedField<TransactionSign>,
    pub extended_data: ::protobuf::SingularPtrField<ExtendedData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Ledger {
    fn default() -> &'a Ledger {
        <Ledger as ::protobuf::Message>::default_instance()
    }
}

impl Ledger {
    pub fn new() -> Ledger {
        ::std::default::Default::default()
    }

    // .LedgerHeader header = 1;


    pub fn get_header(&self) -> &LedgerHeader {
        self.header.as_ref().unwrap_or_else(|| <LedgerHeader as ::protobuf::Message>::default_instance())
    }
    pub fn clear_header(&mut self) {
        self.header.clear();
    }

    pub fn has_header(&self) -> bool {
        self.header.is_some()
    }

    // Param is passed by value, moved
    pub fn set_header(&mut self, v: LedgerHeader) {
        self.header = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_header(&mut self) -> &mut LedgerHeader {
        if self.header.is_none() {
            self.header.set_default();
        }
        self.header.as_mut().unwrap()
    }

    // Take field
    pub fn take_header(&mut self) -> LedgerHeader {
        self.header.take().unwrap_or_else(|| LedgerHeader::new())
    }

    // repeated .TransactionSign transaction_signs = 2;


    pub fn get_transaction_signs(&self) -> &[TransactionSign] {
        &self.transaction_signs
    }
    pub fn clear_transaction_signs(&mut self) {
        self.transaction_signs.clear();
    }

    // Param is passed by value, moved
    pub fn set_transaction_signs(&mut self, v: ::protobuf::RepeatedField<TransactionSign>) {
        self.transaction_signs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transaction_signs(&mut self) -> &mut ::protobuf::RepeatedField<TransactionSign> {
        &mut self.transaction_signs
    }

    // Take field
    pub fn take_transaction_signs(&mut self) -> ::protobuf::RepeatedField<TransactionSign> {
        ::std::mem::replace(&mut self.transaction_signs, ::protobuf::RepeatedField::new())
    }

    // .ExtendedData extended_data = 3;


    pub fn get_extended_data(&self) -> &ExtendedData {
        self.extended_data.as_ref().unwrap_or_else(|| <ExtendedData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_extended_data(&mut self) {
        self.extended_data.clear();
    }

    pub fn has_extended_data(&self) -> bool {
        self.extended_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_extended_data(&mut self, v: ExtendedData) {
        self.extended_data = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_extended_data(&mut self) -> &mut ExtendedData {
        if self.extended_data.is_none() {
            self.extended_data.set_default();
        }
        self.extended_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_extended_data(&mut self) -> ExtendedData {
        self.extended_data.take().unwrap_or_else(|| ExtendedData::new())
    }
}

impl ::protobuf::Message for Ledger {
    fn is_initialized(&self) -> bool {
        for v in &self.header {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transaction_signs {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.extended_data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.header)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transaction_signs)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.extended_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.header.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.transaction_signs {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.extended_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.header.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.transaction_signs {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.extended_data.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Ledger {
        Ledger::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LedgerHeader>>(
                "header",
                |m: &Ledger| { &m.header },
                |m: &mut Ledger| { &mut m.header },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TransactionSign>>(
                "transaction_signs",
                |m: &Ledger| { &m.transaction_signs },
                |m: &mut Ledger| { &mut m.transaction_signs },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ExtendedData>>(
                "extended_data",
                |m: &Ledger| { &m.extended_data },
                |m: &mut Ledger| { &mut m.extended_data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Ledger>(
                "Ledger",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Ledger {
        static instance: ::protobuf::rt::LazyV2<Ledger> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Ledger::new)
    }
}

impl ::protobuf::Clear for Ledger {
    fn clear(&mut self) {
        self.header.clear();
        self.transaction_signs.clear();
        self.extended_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Ledger {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Ledger {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExtendedData {
    // message fields
    pub extra_data: ::protobuf::RepeatedField<super::common::KeyValuePair>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExtendedData {
    fn default() -> &'a ExtendedData {
        <ExtendedData as ::protobuf::Message>::default_instance()
    }
}

impl ExtendedData {
    pub fn new() -> ExtendedData {
        ::std::default::Default::default()
    }

    // repeated .KeyValuePair extra_data = 1;


    pub fn get_extra_data(&self) -> &[super::common::KeyValuePair] {
        &self.extra_data
    }
    pub fn clear_extra_data(&mut self) {
        self.extra_data.clear();
    }

    // Param is passed by value, moved
    pub fn set_extra_data(&mut self, v: ::protobuf::RepeatedField<super::common::KeyValuePair>) {
        self.extra_data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_extra_data(&mut self) -> &mut ::protobuf::RepeatedField<super::common::KeyValuePair> {
        &mut self.extra_data
    }

    // Take field
    pub fn take_extra_data(&mut self) -> ::protobuf::RepeatedField<super::common::KeyValuePair> {
        ::std::mem::replace(&mut self.extra_data, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ExtendedData {
    fn is_initialized(&self) -> bool {
        for v in &self.extra_data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.extra_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.extra_data {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.extra_data {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExtendedData {
        ExtendedData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::KeyValuePair>>(
                "extra_data",
                |m: &ExtendedData| { &m.extra_data },
                |m: &mut ExtendedData| { &mut m.extra_data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ExtendedData>(
                "ExtendedData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ExtendedData {
        static instance: ::protobuf::rt::LazyV2<ExtendedData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ExtendedData::new)
    }
}

impl ::protobuf::Clear for ExtendedData {
    fn clear(&mut self) {
        self.extra_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExtendedData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExtendedData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Transaction {
    // message fields
    pub tx_type: TransactionType,
    pub source: ::std::string::String,
    pub nonce: u64,
    pub to: ::std::string::String,
    pub value: ::std::string::String,
    pub payload: ::std::vec::Vec<u8>,
    pub gas_limit: u64,
    pub gas_price: ::std::string::String,
    pub hub_id: ::std::string::String,
    pub chain_id: ::std::string::String,
    pub reserves: ::protobuf::SingularPtrField<ExtendedData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Transaction {
    fn default() -> &'a Transaction {
        <Transaction as ::protobuf::Message>::default_instance()
    }
}

impl Transaction {
    pub fn new() -> Transaction {
        ::std::default::Default::default()
    }

    // .TransactionType tx_type = 1;


    pub fn get_tx_type(&self) -> TransactionType {
        self.tx_type
    }
    pub fn clear_tx_type(&mut self) {
        self.tx_type = TransactionType::EVM_GENO;
    }

    // Param is passed by value, moved
    pub fn set_tx_type(&mut self, v: TransactionType) {
        self.tx_type = v;
    }

    // string source = 2;


    pub fn get_source(&self) -> &str {
        &self.source
    }
    pub fn clear_source(&mut self) {
        self.source.clear();
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: ::std::string::String) {
        self.source = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source(&mut self) -> &mut ::std::string::String {
        &mut self.source
    }

    // Take field
    pub fn take_source(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.source, ::std::string::String::new())
    }

    // uint64 nonce = 3;


    pub fn get_nonce(&self) -> u64 {
        self.nonce
    }
    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = v;
    }

    // string to = 4;


    pub fn get_to(&self) -> &str {
        &self.to
    }
    pub fn clear_to(&mut self) {
        self.to.clear();
    }

    // Param is passed by value, moved
    pub fn set_to(&mut self, v: ::std::string::String) {
        self.to = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to(&mut self) -> &mut ::std::string::String {
        &mut self.to
    }

    // Take field
    pub fn take_to(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.to, ::std::string::String::new())
    }

    // string value = 5;


    pub fn get_value(&self) -> &str {
        &self.value
    }
    pub fn clear_value(&mut self) {
        self.value.clear();
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: ::std::string::String) {
        self.value = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_value(&mut self) -> &mut ::std::string::String {
        &mut self.value
    }

    // Take field
    pub fn take_value(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.value, ::std::string::String::new())
    }

    // bytes payload = 6;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }

    // uint64 gas_limit = 7;


    pub fn get_gas_limit(&self) -> u64 {
        self.gas_limit
    }
    pub fn clear_gas_limit(&mut self) {
        self.gas_limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_gas_limit(&mut self, v: u64) {
        self.gas_limit = v;
    }

    // string gas_price = 8;


    pub fn get_gas_price(&self) -> &str {
        &self.gas_price
    }
    pub fn clear_gas_price(&mut self) {
        self.gas_price.clear();
    }

    // Param is passed by value, moved
    pub fn set_gas_price(&mut self, v: ::std::string::String) {
        self.gas_price = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gas_price(&mut self) -> &mut ::std::string::String {
        &mut self.gas_price
    }

    // Take field
    pub fn take_gas_price(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gas_price, ::std::string::String::new())
    }

    // string hub_id = 9;


    pub fn get_hub_id(&self) -> &str {
        &self.hub_id
    }
    pub fn clear_hub_id(&mut self) {
        self.hub_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_hub_id(&mut self, v: ::std::string::String) {
        self.hub_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hub_id(&mut self) -> &mut ::std::string::String {
        &mut self.hub_id
    }

    // Take field
    pub fn take_hub_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hub_id, ::std::string::String::new())
    }

    // string chain_id = 10;


    pub fn get_chain_id(&self) -> &str {
        &self.chain_id
    }
    pub fn clear_chain_id(&mut self) {
        self.chain_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_chain_id(&mut self, v: ::std::string::String) {
        self.chain_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chain_id(&mut self) -> &mut ::std::string::String {
        &mut self.chain_id
    }

    // Take field
    pub fn take_chain_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.chain_id, ::std::string::String::new())
    }

    // .ExtendedData reserves = 11;


    pub fn get_reserves(&self) -> &ExtendedData {
        self.reserves.as_ref().unwrap_or_else(|| <ExtendedData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_reserves(&mut self) {
        self.reserves.clear();
    }

    pub fn has_reserves(&self) -> bool {
        self.reserves.is_some()
    }

    // Param is passed by value, moved
    pub fn set_reserves(&mut self, v: ExtendedData) {
        self.reserves = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_reserves(&mut self) -> &mut ExtendedData {
        if self.reserves.is_none() {
            self.reserves.set_default();
        }
        self.reserves.as_mut().unwrap()
    }

    // Take field
    pub fn take_reserves(&mut self) -> ExtendedData {
        self.reserves.take().unwrap_or_else(|| ExtendedData::new())
    }
}

impl ::protobuf::Message for Transaction {
    fn is_initialized(&self) -> bool {
        for v in &self.reserves {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.tx_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.source)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.to)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.value)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gas_limit = tmp;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gas_price)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hub_id)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.chain_id)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.reserves)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.tx_type != TransactionType::EVM_GENO {
            my_size += ::protobuf::rt::enum_size(1, self.tx_type);
        }
        if !self.source.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.source);
        }
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(3, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.to.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.to);
        }
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.value);
        }
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.payload);
        }
        if self.gas_limit != 0 {
            my_size += ::protobuf::rt::value_size(7, self.gas_limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.gas_price.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.gas_price);
        }
        if !self.hub_id.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.hub_id);
        }
        if !self.chain_id.is_empty() {
            my_size += ::protobuf::rt::string_size(10, &self.chain_id);
        }
        if let Some(ref v) = self.reserves.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.tx_type != TransactionType::EVM_GENO {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.tx_type))?;
        }
        if !self.source.is_empty() {
            os.write_string(2, &self.source)?;
        }
        if self.nonce != 0 {
            os.write_uint64(3, self.nonce)?;
        }
        if !self.to.is_empty() {
            os.write_string(4, &self.to)?;
        }
        if !self.value.is_empty() {
            os.write_string(5, &self.value)?;
        }
        if !self.payload.is_empty() {
            os.write_bytes(6, &self.payload)?;
        }
        if self.gas_limit != 0 {
            os.write_uint64(7, self.gas_limit)?;
        }
        if !self.gas_price.is_empty() {
            os.write_string(8, &self.gas_price)?;
        }
        if !self.hub_id.is_empty() {
            os.write_string(9, &self.hub_id)?;
        }
        if !self.chain_id.is_empty() {
            os.write_string(10, &self.chain_id)?;
        }
        if let Some(ref v) = self.reserves.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Transaction {
        Transaction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TransactionType>>(
                "tx_type",
                |m: &Transaction| { &m.tx_type },
                |m: &mut Transaction| { &mut m.tx_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "source",
                |m: &Transaction| { &m.source },
                |m: &mut Transaction| { &mut m.source },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "nonce",
                |m: &Transaction| { &m.nonce },
                |m: &mut Transaction| { &mut m.nonce },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "to",
                |m: &Transaction| { &m.to },
                |m: &mut Transaction| { &mut m.to },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "value",
                |m: &Transaction| { &m.value },
                |m: &mut Transaction| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "payload",
                |m: &Transaction| { &m.payload },
                |m: &mut Transaction| { &mut m.payload },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "gas_limit",
                |m: &Transaction| { &m.gas_limit },
                |m: &mut Transaction| { &mut m.gas_limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gas_price",
                |m: &Transaction| { &m.gas_price },
                |m: &mut Transaction| { &mut m.gas_price },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hub_id",
                |m: &Transaction| { &m.hub_id },
                |m: &mut Transaction| { &mut m.hub_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "chain_id",
                |m: &Transaction| { &m.chain_id },
                |m: &mut Transaction| { &mut m.chain_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ExtendedData>>(
                "reserves",
                |m: &Transaction| { &m.reserves },
                |m: &mut Transaction| { &mut m.reserves },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Transaction>(
                "Transaction",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Transaction {
        static instance: ::protobuf::rt::LazyV2<Transaction> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Transaction::new)
    }
}

impl ::protobuf::Clear for Transaction {
    fn clear(&mut self) {
        self.tx_type = TransactionType::EVM_GENO;
        self.source.clear();
        self.nonce = 0;
        self.to.clear();
        self.value.clear();
        self.payload.clear();
        self.gas_limit = 0;
        self.gas_price.clear();
        self.hub_id.clear();
        self.chain_id.clear();
        self.reserves.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Transaction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Transaction {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransactionSign {
    // message fields
    pub transaction: ::protobuf::SingularPtrField<Transaction>,
    pub signatures: ::protobuf::RepeatedField<super::common::Signature>,
    pub source_type: TransactionSign_SourceType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransactionSign {
    fn default() -> &'a TransactionSign {
        <TransactionSign as ::protobuf::Message>::default_instance()
    }
}

impl TransactionSign {
    pub fn new() -> TransactionSign {
        ::std::default::Default::default()
    }

    // .Transaction transaction = 1;


    pub fn get_transaction(&self) -> &Transaction {
        self.transaction.as_ref().unwrap_or_else(|| <Transaction as ::protobuf::Message>::default_instance())
    }
    pub fn clear_transaction(&mut self) {
        self.transaction.clear();
    }

    pub fn has_transaction(&self) -> bool {
        self.transaction.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction(&mut self, v: Transaction) {
        self.transaction = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction(&mut self) -> &mut Transaction {
        if self.transaction.is_none() {
            self.transaction.set_default();
        }
        self.transaction.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction(&mut self) -> Transaction {
        self.transaction.take().unwrap_or_else(|| Transaction::new())
    }

    // repeated .Signature signatures = 2;


    pub fn get_signatures(&self) -> &[super::common::Signature] {
        &self.signatures
    }
    pub fn clear_signatures(&mut self) {
        self.signatures.clear();
    }

    // Param is passed by value, moved
    pub fn set_signatures(&mut self, v: ::protobuf::RepeatedField<super::common::Signature>) {
        self.signatures = v;
    }

    // Mutable pointer to the field.
    pub fn mut_signatures(&mut self) -> &mut ::protobuf::RepeatedField<super::common::Signature> {
        &mut self.signatures
    }

    // Take field
    pub fn take_signatures(&mut self) -> ::protobuf::RepeatedField<super::common::Signature> {
        ::std::mem::replace(&mut self.signatures, ::protobuf::RepeatedField::new())
    }

    // .TransactionSign.SourceType source_type = 4;


    pub fn get_source_type(&self) -> TransactionSign_SourceType {
        self.source_type
    }
    pub fn clear_source_type(&mut self) {
        self.source_type = TransactionSign_SourceType::JSONRPC;
    }

    // Param is passed by value, moved
    pub fn set_source_type(&mut self, v: TransactionSign_SourceType) {
        self.source_type = v;
    }
}

impl ::protobuf::Message for TransactionSign {
    fn is_initialized(&self) -> bool {
        for v in &self.transaction {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.signatures {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.signatures)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.source_type, 4, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.transaction.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.signatures {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.source_type != TransactionSign_SourceType::JSONRPC {
            my_size += ::protobuf::rt::enum_size(4, self.source_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.transaction.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.signatures {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.source_type != TransactionSign_SourceType::JSONRPC {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.source_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionSign {
        TransactionSign::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Transaction>>(
                "transaction",
                |m: &TransactionSign| { &m.transaction },
                |m: &mut TransactionSign| { &mut m.transaction },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::Signature>>(
                "signatures",
                |m: &TransactionSign| { &m.signatures },
                |m: &mut TransactionSign| { &mut m.signatures },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TransactionSign_SourceType>>(
                "source_type",
                |m: &TransactionSign| { &m.source_type },
                |m: &mut TransactionSign| { &mut m.source_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransactionSign>(
                "TransactionSign",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransactionSign {
        static instance: ::protobuf::rt::LazyV2<TransactionSign> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransactionSign::new)
    }
}

impl ::protobuf::Clear for TransactionSign {
    fn clear(&mut self) {
        self.transaction.clear();
        self.signatures.clear();
        self.source_type = TransactionSign_SourceType::JSONRPC;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionSign {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionSign {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TransactionSign_SourceType {
    JSONRPC = 0,
    P2P = 1,
    WEBSOCKET = 2,
}

impl ::protobuf::ProtobufEnum for TransactionSign_SourceType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TransactionSign_SourceType> {
        match value {
            0 => ::std::option::Option::Some(TransactionSign_SourceType::JSONRPC),
            1 => ::std::option::Option::Some(TransactionSign_SourceType::P2P),
            2 => ::std::option::Option::Some(TransactionSign_SourceType::WEBSOCKET),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TransactionSign_SourceType] = &[
            TransactionSign_SourceType::JSONRPC,
            TransactionSign_SourceType::P2P,
            TransactionSign_SourceType::WEBSOCKET,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TransactionSign_SourceType>("TransactionSign.SourceType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TransactionSign_SourceType {
}

impl ::std::default::Default for TransactionSign_SourceType {
    fn default() -> Self {
        TransactionSign_SourceType::JSONRPC
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionSign_SourceType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransactionSignBrodcast {
    // message fields
    pub batchid: ::std::string::String,
    pub transactions: ::protobuf::RepeatedField<TransactionSign>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransactionSignBrodcast {
    fn default() -> &'a TransactionSignBrodcast {
        <TransactionSignBrodcast as ::protobuf::Message>::default_instance()
    }
}

impl TransactionSignBrodcast {
    pub fn new() -> TransactionSignBrodcast {
        ::std::default::Default::default()
    }

    // string batchid = 1;


    pub fn get_batchid(&self) -> &str {
        &self.batchid
    }
    pub fn clear_batchid(&mut self) {
        self.batchid.clear();
    }

    // Param is passed by value, moved
    pub fn set_batchid(&mut self, v: ::std::string::String) {
        self.batchid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_batchid(&mut self) -> &mut ::std::string::String {
        &mut self.batchid
    }

    // Take field
    pub fn take_batchid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.batchid, ::std::string::String::new())
    }

    // repeated .TransactionSign transactions = 2;


    pub fn get_transactions(&self) -> &[TransactionSign] {
        &self.transactions
    }
    pub fn clear_transactions(&mut self) {
        self.transactions.clear();
    }

    // Param is passed by value, moved
    pub fn set_transactions(&mut self, v: ::protobuf::RepeatedField<TransactionSign>) {
        self.transactions = v;
    }

    // Mutable pointer to the field.
    pub fn mut_transactions(&mut self) -> &mut ::protobuf::RepeatedField<TransactionSign> {
        &mut self.transactions
    }

    // Take field
    pub fn take_transactions(&mut self) -> ::protobuf::RepeatedField<TransactionSign> {
        ::std::mem::replace(&mut self.transactions, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TransactionSignBrodcast {
    fn is_initialized(&self) -> bool {
        for v in &self.transactions {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.batchid)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.transactions)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.batchid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.batchid);
        }
        for value in &self.transactions {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.batchid.is_empty() {
            os.write_string(1, &self.batchid)?;
        }
        for v in &self.transactions {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionSignBrodcast {
        TransactionSignBrodcast::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "batchid",
                |m: &TransactionSignBrodcast| { &m.batchid },
                |m: &mut TransactionSignBrodcast| { &mut m.batchid },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TransactionSign>>(
                "transactions",
                |m: &TransactionSignBrodcast| { &m.transactions },
                |m: &mut TransactionSignBrodcast| { &mut m.transactions },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransactionSignBrodcast>(
                "TransactionSignBrodcast",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransactionSignBrodcast {
        static instance: ::protobuf::rt::LazyV2<TransactionSignBrodcast> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransactionSignBrodcast::new)
    }
}

impl ::protobuf::Clear for TransactionSignBrodcast {
    fn clear(&mut self) {
        self.batchid.clear();
        self.transactions.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionSignBrodcast {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionSignBrodcast {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransactionSignStore {
    // message fields
    pub transaction_sign: ::protobuf::SingularPtrField<TransactionSign>,
    pub transaction_result: ::protobuf::SingularPtrField<super::common::TransactionResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransactionSignStore {
    fn default() -> &'a TransactionSignStore {
        <TransactionSignStore as ::protobuf::Message>::default_instance()
    }
}

impl TransactionSignStore {
    pub fn new() -> TransactionSignStore {
        ::std::default::Default::default()
    }

    // .TransactionSign transaction_sign = 1;


    pub fn get_transaction_sign(&self) -> &TransactionSign {
        self.transaction_sign.as_ref().unwrap_or_else(|| <TransactionSign as ::protobuf::Message>::default_instance())
    }
    pub fn clear_transaction_sign(&mut self) {
        self.transaction_sign.clear();
    }

    pub fn has_transaction_sign(&self) -> bool {
        self.transaction_sign.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction_sign(&mut self, v: TransactionSign) {
        self.transaction_sign = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_sign(&mut self) -> &mut TransactionSign {
        if self.transaction_sign.is_none() {
            self.transaction_sign.set_default();
        }
        self.transaction_sign.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction_sign(&mut self) -> TransactionSign {
        self.transaction_sign.take().unwrap_or_else(|| TransactionSign::new())
    }

    // .TransactionResult transaction_result = 2;


    pub fn get_transaction_result(&self) -> &super::common::TransactionResult {
        self.transaction_result.as_ref().unwrap_or_else(|| <super::common::TransactionResult as ::protobuf::Message>::default_instance())
    }
    pub fn clear_transaction_result(&mut self) {
        self.transaction_result.clear();
    }

    pub fn has_transaction_result(&self) -> bool {
        self.transaction_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_transaction_result(&mut self, v: super::common::TransactionResult) {
        self.transaction_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_result(&mut self) -> &mut super::common::TransactionResult {
        if self.transaction_result.is_none() {
            self.transaction_result.set_default();
        }
        self.transaction_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_transaction_result(&mut self) -> super::common::TransactionResult {
        self.transaction_result.take().unwrap_or_else(|| super::common::TransactionResult::new())
    }
}

impl ::protobuf::Message for TransactionSignStore {
    fn is_initialized(&self) -> bool {
        for v in &self.transaction_sign {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.transaction_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction_sign)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.transaction_result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.transaction_sign.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.transaction_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.transaction_sign.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.transaction_result.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionSignStore {
        TransactionSignStore::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TransactionSign>>(
                "transaction_sign",
                |m: &TransactionSignStore| { &m.transaction_sign },
                |m: &mut TransactionSignStore| { &mut m.transaction_sign },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::common::TransactionResult>>(
                "transaction_result",
                |m: &TransactionSignStore| { &m.transaction_result },
                |m: &mut TransactionSignStore| { &mut m.transaction_result },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TransactionSignStore>(
                "TransactionSignStore",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TransactionSignStore {
        static instance: ::protobuf::rt::LazyV2<TransactionSignStore> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TransactionSignStore::new)
    }
}

impl ::protobuf::Clear for TransactionSignStore {
    fn clear(&mut self) {
        self.transaction_sign.clear();
        self.transaction_result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionSignStore {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionSignStore {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Contract {
    // message fields
    pub name: ::std::string::String,
    pub code: ::std::vec::Vec<u8>,
    pub creator: ::std::string::String,
    pub kind: Contract_ContractType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Contract {
    fn default() -> &'a Contract {
        <Contract as ::protobuf::Message>::default_instance()
    }
}

impl Contract {
    pub fn new() -> Contract {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // bytes code = 2;


    pub fn get_code(&self) -> &[u8] {
        &self.code
    }
    pub fn clear_code(&mut self) {
        self.code.clear();
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: ::std::vec::Vec<u8>) {
        self.code = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_code(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.code
    }

    // Take field
    pub fn take_code(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.code, ::std::vec::Vec::new())
    }

    // string creator = 4;


    pub fn get_creator(&self) -> &str {
        &self.creator
    }
    pub fn clear_creator(&mut self) {
        self.creator.clear();
    }

    // Param is passed by value, moved
    pub fn set_creator(&mut self, v: ::std::string::String) {
        self.creator = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_creator(&mut self) -> &mut ::std::string::String {
        &mut self.creator
    }

    // Take field
    pub fn take_creator(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.creator, ::std::string::String::new())
    }

    // .Contract.ContractType kind = 5;


    pub fn get_kind(&self) -> Contract_ContractType {
        self.kind
    }
    pub fn clear_kind(&mut self) {
        self.kind = Contract_ContractType::EVM;
    }

    // Param is passed by value, moved
    pub fn set_kind(&mut self, v: Contract_ContractType) {
        self.kind = v;
    }
}

impl ::protobuf::Message for Contract {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.code)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.creator)?;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.kind, 5, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.code.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.code);
        }
        if !self.creator.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.creator);
        }
        if self.kind != Contract_ContractType::EVM {
            my_size += ::protobuf::rt::enum_size(5, self.kind);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.code.is_empty() {
            os.write_bytes(2, &self.code)?;
        }
        if !self.creator.is_empty() {
            os.write_string(4, &self.creator)?;
        }
        if self.kind != Contract_ContractType::EVM {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.kind))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Contract {
        Contract::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Contract| { &m.name },
                |m: &mut Contract| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "code",
                |m: &Contract| { &m.code },
                |m: &mut Contract| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "creator",
                |m: &Contract| { &m.creator },
                |m: &mut Contract| { &mut m.creator },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Contract_ContractType>>(
                "kind",
                |m: &Contract| { &m.kind },
                |m: &mut Contract| { &mut m.kind },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Contract>(
                "Contract",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Contract {
        static instance: ::protobuf::rt::LazyV2<Contract> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Contract::new)
    }
}

impl ::protobuf::Clear for Contract {
    fn clear(&mut self) {
        self.name.clear();
        self.code.clear();
        self.creator.clear();
        self.kind = Contract_ContractType::EVM;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Contract {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Contract {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Contract_ContractType {
    EVM = 0,
    WASM = 1,
}

impl ::protobuf::ProtobufEnum for Contract_ContractType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Contract_ContractType> {
        match value {
            0 => ::std::option::Option::Some(Contract_ContractType::EVM),
            1 => ::std::option::Option::Some(Contract_ContractType::WASM),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Contract_ContractType] = &[
            Contract_ContractType::EVM,
            Contract_ContractType::WASM,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Contract_ContractType>("Contract.ContractType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Contract_ContractType {
}

impl ::std::default::Default for Contract_ContractType {
    fn default() -> Self {
        Contract_ContractType::EVM
    }
}

impl ::protobuf::reflect::ProtobufValue for Contract_ContractType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Account {
    // message fields
    pub address: ::std::string::String,
    pub nonce: u64,
    pub balance: ::std::string::String,
    pub metadata_hash: ::std::vec::Vec<u8>,
    pub contract: ::protobuf::SingularPtrField<Contract>,
    pub document: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Account {
    fn default() -> &'a Account {
        <Account as ::protobuf::Message>::default_instance()
    }
}

impl Account {
    pub fn new() -> Account {
        ::std::default::Default::default()
    }

    // string address = 1;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // uint64 nonce = 2;


    pub fn get_nonce(&self) -> u64 {
        self.nonce
    }
    pub fn clear_nonce(&mut self) {
        self.nonce = 0;
    }

    // Param is passed by value, moved
    pub fn set_nonce(&mut self, v: u64) {
        self.nonce = v;
    }

    // string balance = 3;


    pub fn get_balance(&self) -> &str {
        &self.balance
    }
    pub fn clear_balance(&mut self) {
        self.balance.clear();
    }

    // Param is passed by value, moved
    pub fn set_balance(&mut self, v: ::std::string::String) {
        self.balance = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_balance(&mut self) -> &mut ::std::string::String {
        &mut self.balance
    }

    // Take field
    pub fn take_balance(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.balance, ::std::string::String::new())
    }

    // bytes metadata_hash = 4;


    pub fn get_metadata_hash(&self) -> &[u8] {
        &self.metadata_hash
    }
    pub fn clear_metadata_hash(&mut self) {
        self.metadata_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_metadata_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.metadata_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.metadata_hash
    }

    // Take field
    pub fn take_metadata_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.metadata_hash, ::std::vec::Vec::new())
    }

    // .Contract contract = 5;


    pub fn get_contract(&self) -> &Contract {
        self.contract.as_ref().unwrap_or_else(|| <Contract as ::protobuf::Message>::default_instance())
    }
    pub fn clear_contract(&mut self) {
        self.contract.clear();
    }

    pub fn has_contract(&self) -> bool {
        self.contract.is_some()
    }

    // Param is passed by value, moved
    pub fn set_contract(&mut self, v: Contract) {
        self.contract = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_contract(&mut self) -> &mut Contract {
        if self.contract.is_none() {
            self.contract.set_default();
        }
        self.contract.as_mut().unwrap()
    }

    // Take field
    pub fn take_contract(&mut self) -> Contract {
        self.contract.take().unwrap_or_else(|| Contract::new())
    }

    // string document = 6;


    pub fn get_document(&self) -> &str {
        &self.document
    }
    pub fn clear_document(&mut self) {
        self.document.clear();
    }

    // Param is passed by value, moved
    pub fn set_document(&mut self, v: ::std::string::String) {
        self.document = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_document(&mut self) -> &mut ::std::string::String {
        &mut self.document
    }

    // Take field
    pub fn take_document(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.document, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Account {
    fn is_initialized(&self) -> bool {
        for v in &self.contract {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.nonce = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.balance)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.metadata_hash)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.contract)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.document)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        if self.nonce != 0 {
            my_size += ::protobuf::rt::value_size(2, self.nonce, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.balance.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.balance);
        }
        if !self.metadata_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.metadata_hash);
        }
        if let Some(ref v) = self.contract.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.document.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.document);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        if self.nonce != 0 {
            os.write_uint64(2, self.nonce)?;
        }
        if !self.balance.is_empty() {
            os.write_string(3, &self.balance)?;
        }
        if !self.metadata_hash.is_empty() {
            os.write_bytes(4, &self.metadata_hash)?;
        }
        if let Some(ref v) = self.contract.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.document.is_empty() {
            os.write_string(6, &self.document)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Account {
        Account::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &Account| { &m.address },
                |m: &mut Account| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "nonce",
                |m: &Account| { &m.nonce },
                |m: &mut Account| { &mut m.nonce },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "balance",
                |m: &Account| { &m.balance },
                |m: &mut Account| { &mut m.balance },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "metadata_hash",
                |m: &Account| { &m.metadata_hash },
                |m: &mut Account| { &mut m.metadata_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Contract>>(
                "contract",
                |m: &Account| { &m.contract },
                |m: &mut Account| { &mut m.contract },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "document",
                |m: &Account| { &m.document },
                |m: &mut Account| { &mut m.document },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Account>(
                "Account",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Account {
        static instance: ::protobuf::rt::LazyV2<Account> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Account::new)
    }
}

impl ::protobuf::Clear for Account {
    fn clear(&mut self) {
        self.address.clear();
        self.nonce = 0;
        self.balance.clear();
        self.metadata_hash.clear();
        self.contract.clear();
        self.document.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Account {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Account {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SyncChain {
    // message fields
    pub height: i64,
    pub hash: i64,
    pub chain_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SyncChain {
    fn default() -> &'a SyncChain {
        <SyncChain as ::protobuf::Message>::default_instance()
    }
}

impl SyncChain {
    pub fn new() -> SyncChain {
        ::std::default::Default::default()
    }

    // int64 height = 1;


    pub fn get_height(&self) -> i64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: i64) {
        self.height = v;
    }

    // int64 hash = 2;


    pub fn get_hash(&self) -> i64 {
        self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash = 0;
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: i64) {
        self.hash = v;
    }

    // string chain_id = 3;


    pub fn get_chain_id(&self) -> &str {
        &self.chain_id
    }
    pub fn clear_chain_id(&mut self) {
        self.chain_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_chain_id(&mut self, v: ::std::string::String) {
        self.chain_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chain_id(&mut self) -> &mut ::std::string::String {
        &mut self.chain_id
    }

    // Take field
    pub fn take_chain_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.chain_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SyncChain {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.height = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.hash = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.chain_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(1, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.hash != 0 {
            my_size += ::protobuf::rt::value_size(2, self.hash, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.chain_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.chain_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.height != 0 {
            os.write_int64(1, self.height)?;
        }
        if self.hash != 0 {
            os.write_int64(2, self.hash)?;
        }
        if !self.chain_id.is_empty() {
            os.write_string(3, &self.chain_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SyncChain {
        SyncChain::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "height",
                |m: &SyncChain| { &m.height },
                |m: &mut SyncChain| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "hash",
                |m: &SyncChain| { &m.hash },
                |m: &mut SyncChain| { &mut m.hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "chain_id",
                |m: &SyncChain| { &m.chain_id },
                |m: &mut SyncChain| { &mut m.chain_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SyncChain>(
                "SyncChain",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SyncChain {
        static instance: ::protobuf::rt::LazyV2<SyncChain> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SyncChain::new)
    }
}

impl ::protobuf::Clear for SyncChain {
    fn clear(&mut self) {
        self.height = 0;
        self.hash = 0;
        self.chain_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SyncChain {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SyncChain {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SyncChainStatus {
    // message fields
    pub height: i64,
    pub hash: ::std::string::String,
    pub chain_id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SyncChainStatus {
    fn default() -> &'a SyncChainStatus {
        <SyncChainStatus as ::protobuf::Message>::default_instance()
    }
}

impl SyncChainStatus {
    pub fn new() -> SyncChainStatus {
        ::std::default::Default::default()
    }

    // int64 height = 1;


    pub fn get_height(&self) -> i64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: i64) {
        self.height = v;
    }

    // string hash = 2;


    pub fn get_hash(&self) -> &str {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::string::String) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::string::String {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hash, ::std::string::String::new())
    }

    // string chain_id = 3;


    pub fn get_chain_id(&self) -> &str {
        &self.chain_id
    }
    pub fn clear_chain_id(&mut self) {
        self.chain_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_chain_id(&mut self, v: ::std::string::String) {
        self.chain_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chain_id(&mut self) -> &mut ::std::string::String {
        &mut self.chain_id
    }

    // Take field
    pub fn take_chain_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.chain_id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SyncChainStatus {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.height = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hash)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.chain_id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(1, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.hash);
        }
        if !self.chain_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.chain_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.height != 0 {
            os.write_int64(1, self.height)?;
        }
        if !self.hash.is_empty() {
            os.write_string(2, &self.hash)?;
        }
        if !self.chain_id.is_empty() {
            os.write_string(3, &self.chain_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SyncChainStatus {
        SyncChainStatus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "height",
                |m: &SyncChainStatus| { &m.height },
                |m: &mut SyncChainStatus| { &mut m.height },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hash",
                |m: &SyncChainStatus| { &m.hash },
                |m: &mut SyncChainStatus| { &mut m.hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "chain_id",
                |m: &SyncChainStatus| { &m.chain_id },
                |m: &mut SyncChainStatus| { &mut m.chain_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SyncChainStatus>(
                "SyncChainStatus",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SyncChainStatus {
        static instance: ::protobuf::rt::LazyV2<SyncChainStatus> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SyncChainStatus::new)
    }
}

impl ::protobuf::Clear for SyncChainStatus {
    fn clear(&mut self) {
        self.height = 0;
        self.hash.clear();
        self.chain_id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SyncChainStatus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SyncChainStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SyncBlockRequest {
    // message fields
    pub begin: i64,
    pub end: i64,
    pub hash: ::std::string::String,
    pub chain_id: ::std::string::String,
    pub requestid: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SyncBlockRequest {
    fn default() -> &'a SyncBlockRequest {
        <SyncBlockRequest as ::protobuf::Message>::default_instance()
    }
}

impl SyncBlockRequest {
    pub fn new() -> SyncBlockRequest {
        ::std::default::Default::default()
    }

    // int64 begin = 1;


    pub fn get_begin(&self) -> i64 {
        self.begin
    }
    pub fn clear_begin(&mut self) {
        self.begin = 0;
    }

    // Param is passed by value, moved
    pub fn set_begin(&mut self, v: i64) {
        self.begin = v;
    }

    // int64 end = 2;


    pub fn get_end(&self) -> i64 {
        self.end
    }
    pub fn clear_end(&mut self) {
        self.end = 0;
    }

    // Param is passed by value, moved
    pub fn set_end(&mut self, v: i64) {
        self.end = v;
    }

    // string hash = 3;


    pub fn get_hash(&self) -> &str {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::string::String) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::string::String {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hash, ::std::string::String::new())
    }

    // string chain_id = 4;


    pub fn get_chain_id(&self) -> &str {
        &self.chain_id
    }
    pub fn clear_chain_id(&mut self) {
        self.chain_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_chain_id(&mut self, v: ::std::string::String) {
        self.chain_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chain_id(&mut self) -> &mut ::std::string::String {
        &mut self.chain_id
    }

    // Take field
    pub fn take_chain_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.chain_id, ::std::string::String::new())
    }

    // int64 requestid = 5;


    pub fn get_requestid(&self) -> i64 {
        self.requestid
    }
    pub fn clear_requestid(&mut self) {
        self.requestid = 0;
    }

    // Param is passed by value, moved
    pub fn set_requestid(&mut self, v: i64) {
        self.requestid = v;
    }
}

impl ::protobuf::Message for SyncBlockRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.begin = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.end = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hash)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.chain_id)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.requestid = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.begin != 0 {
            my_size += ::protobuf::rt::value_size(1, self.begin, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.end != 0 {
            my_size += ::protobuf::rt::value_size(2, self.end, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.hash);
        }
        if !self.chain_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.chain_id);
        }
        if self.requestid != 0 {
            my_size += ::protobuf::rt::value_size(5, self.requestid, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.begin != 0 {
            os.write_int64(1, self.begin)?;
        }
        if self.end != 0 {
            os.write_int64(2, self.end)?;
        }
        if !self.hash.is_empty() {
            os.write_string(3, &self.hash)?;
        }
        if !self.chain_id.is_empty() {
            os.write_string(4, &self.chain_id)?;
        }
        if self.requestid != 0 {
            os.write_int64(5, self.requestid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SyncBlockRequest {
        SyncBlockRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "begin",
                |m: &SyncBlockRequest| { &m.begin },
                |m: &mut SyncBlockRequest| { &mut m.begin },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "end",
                |m: &SyncBlockRequest| { &m.end },
                |m: &mut SyncBlockRequest| { &mut m.end },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hash",
                |m: &SyncBlockRequest| { &m.hash },
                |m: &mut SyncBlockRequest| { &mut m.hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "chain_id",
                |m: &SyncBlockRequest| { &m.chain_id },
                |m: &mut SyncBlockRequest| { &mut m.chain_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "requestid",
                |m: &SyncBlockRequest| { &m.requestid },
                |m: &mut SyncBlockRequest| { &mut m.requestid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SyncBlockRequest>(
                "SyncBlockRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SyncBlockRequest {
        static instance: ::protobuf::rt::LazyV2<SyncBlockRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SyncBlockRequest::new)
    }
}

impl ::protobuf::Clear for SyncBlockRequest {
    fn clear(&mut self) {
        self.begin = 0;
        self.end = 0;
        self.hash.clear();
        self.chain_id.clear();
        self.requestid = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SyncBlockRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SyncBlockRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SyncBlockResponse {
    // message fields
    pub number: i64,
    pub requestid: i64,
    pub finish: bool,
    pub chain_id: ::std::string::String,
    pub blocks: ::protobuf::RepeatedField<Ledger>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SyncBlockResponse {
    fn default() -> &'a SyncBlockResponse {
        <SyncBlockResponse as ::protobuf::Message>::default_instance()
    }
}

impl SyncBlockResponse {
    pub fn new() -> SyncBlockResponse {
        ::std::default::Default::default()
    }

    // int64 number = 1;


    pub fn get_number(&self) -> i64 {
        self.number
    }
    pub fn clear_number(&mut self) {
        self.number = 0;
    }

    // Param is passed by value, moved
    pub fn set_number(&mut self, v: i64) {
        self.number = v;
    }

    // int64 requestid = 2;


    pub fn get_requestid(&self) -> i64 {
        self.requestid
    }
    pub fn clear_requestid(&mut self) {
        self.requestid = 0;
    }

    // Param is passed by value, moved
    pub fn set_requestid(&mut self, v: i64) {
        self.requestid = v;
    }

    // bool finish = 3;


    pub fn get_finish(&self) -> bool {
        self.finish
    }
    pub fn clear_finish(&mut self) {
        self.finish = false;
    }

    // Param is passed by value, moved
    pub fn set_finish(&mut self, v: bool) {
        self.finish = v;
    }

    // string chain_id = 4;


    pub fn get_chain_id(&self) -> &str {
        &self.chain_id
    }
    pub fn clear_chain_id(&mut self) {
        self.chain_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_chain_id(&mut self, v: ::std::string::String) {
        self.chain_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_chain_id(&mut self) -> &mut ::std::string::String {
        &mut self.chain_id
    }

    // Take field
    pub fn take_chain_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.chain_id, ::std::string::String::new())
    }

    // repeated .Ledger blocks = 5;


    pub fn get_blocks(&self) -> &[Ledger] {
        &self.blocks
    }
    pub fn clear_blocks(&mut self) {
        self.blocks.clear();
    }

    // Param is passed by value, moved
    pub fn set_blocks(&mut self, v: ::protobuf::RepeatedField<Ledger>) {
        self.blocks = v;
    }

    // Mutable pointer to the field.
    pub fn mut_blocks(&mut self) -> &mut ::protobuf::RepeatedField<Ledger> {
        &mut self.blocks
    }

    // Take field
    pub fn take_blocks(&mut self) -> ::protobuf::RepeatedField<Ledger> {
        ::std::mem::replace(&mut self.blocks, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for SyncBlockResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.blocks {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.number = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.requestid = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.finish = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.chain_id)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.blocks)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.number != 0 {
            my_size += ::protobuf::rt::value_size(1, self.number, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.requestid != 0 {
            my_size += ::protobuf::rt::value_size(2, self.requestid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.finish != false {
            my_size += 2;
        }
        if !self.chain_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.chain_id);
        }
        for value in &self.blocks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.number != 0 {
            os.write_int64(1, self.number)?;
        }
        if self.requestid != 0 {
            os.write_int64(2, self.requestid)?;
        }
        if self.finish != false {
            os.write_bool(3, self.finish)?;
        }
        if !self.chain_id.is_empty() {
            os.write_string(4, &self.chain_id)?;
        }
        for v in &self.blocks {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SyncBlockResponse {
        SyncBlockResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "number",
                |m: &SyncBlockResponse| { &m.number },
                |m: &mut SyncBlockResponse| { &mut m.number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "requestid",
                |m: &SyncBlockResponse| { &m.requestid },
                |m: &mut SyncBlockResponse| { &mut m.requestid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "finish",
                |m: &SyncBlockResponse| { &m.finish },
                |m: &mut SyncBlockResponse| { &mut m.finish },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "chain_id",
                |m: &SyncBlockResponse| { &m.chain_id },
                |m: &mut SyncBlockResponse| { &mut m.chain_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Ledger>>(
                "blocks",
                |m: &SyncBlockResponse| { &m.blocks },
                |m: &mut SyncBlockResponse| { &mut m.blocks },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SyncBlockResponse>(
                "SyncBlockResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SyncBlockResponse {
        static instance: ::protobuf::rt::LazyV2<SyncBlockResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SyncBlockResponse::new)
    }
}

impl ::protobuf::Clear for SyncBlockResponse {
    fn clear(&mut self) {
        self.number = 0;
        self.requestid = 0;
        self.finish = false;
        self.chain_id.clear();
        self.blocks.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SyncBlockResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SyncBlockResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TransactionType {
    EVM_GENO = 0,
    ETH_LEGACY = 1,
    WASM = 2,
}

impl ::protobuf::ProtobufEnum for TransactionType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TransactionType> {
        match value {
            0 => ::std::option::Option::Some(TransactionType::EVM_GENO),
            1 => ::std::option::Option::Some(TransactionType::ETH_LEGACY),
            2 => ::std::option::Option::Some(TransactionType::WASM),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TransactionType] = &[
            TransactionType::EVM_GENO,
            TransactionType::ETH_LEGACY,
            TransactionType::WASM,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<TransactionType>("TransactionType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for TransactionType {
}

impl ::std::default::Default for TransactionType {
    fn default() -> Self {
        TransactionType::EVM_GENO
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cledger.proto\x1a\x0ccommon.proto\"\xb1\x04\n\x0cLedgerHeader\x12\
    \x18\n\x06height\x18\x01\x20\x01(\x04R\x06heightB\0\x12\x14\n\x04hash\
    \x18\x02\x20\x01(\x0cR\x04hashB\0\x12%\n\rprevious_hash\x18\x03\x20\x01(\
    \x0cR\x0cpreviousHashB\0\x12\x1f\n\nstate_hash\x18\x04\x20\x01(\x0cR\tst\
    ateHashB\0\x12-\n\x11transactions_hash\x18\x05\x20\x01(\x0cR\x10transact\
    ionsHashB\0\x12#\n\x0creceips_hash\x18\x06\x20\x01(\x0cR\x0breceipsHashB\
    \0\x12\x1e\n\ttimestamp\x18\x07\x20\x01(\x03R\ttimestampB\0\x12\x1a\n\
    \x07version\x18\x08\x20\x01(\x04R\x07versionB\0\x12\x1b\n\x08tx_count\
    \x18\t\x20\x01(\x04R\x07txCountB\0\x12&\n\x0etotal_tx_count\x18\n\x20\
    \x01(\x04R\x0ctotalTxCountB\0\x12)\n\x0fvalidators_hash\x18\x0b\x20\x01(\
    \x0cR\x0evalidatorsHashB\0\x12\x1d\n\tfees_hash\x18\x0c\x20\x01(\x0cR\
    \x08feesHashB\0\x12\x17\n\x06hub_id\x18\r\x20\x01(\tR\x05hubIdB\0\x12\
    \x1b\n\x08chain_id\x18\x0e\x20\x01(\tR\x07chainIdB\0\x12\x1c\n\x08propos\
    er\x18\x0f\x20\x01(\tR\x08proposerB\0\x124\n\rextended_data\x18\x10\x20\
    \x01(\x0b2\r.ExtendedDataR\x0cextendedDataB\0:\0\"\xaa\x01\n\x06Ledger\
    \x12'\n\x06header\x18\x01\x20\x01(\x0b2\r.LedgerHeaderR\x06headerB\0\x12\
    ?\n\x11transaction_signs\x18\x02\x20\x03(\x0b2\x10.TransactionSignR\x10t\
    ransactionSignsB\0\x124\n\rextended_data\x18\x03\x20\x01(\x0b2\r.Extende\
    dDataR\x0cextendedDataB\0:\0\"@\n\x0cExtendedData\x12.\n\nextra_data\x18\
    \x01\x20\x03(\x0b2\r.KeyValuePairR\textraDataB\0:\0\"\xd5\x02\n\x0bTrans\
    action\x12+\n\x07tx_type\x18\x01\x20\x01(\x0e2\x10.TransactionTypeR\x06t\
    xTypeB\0\x12\x18\n\x06source\x18\x02\x20\x01(\tR\x06sourceB\0\x12\x16\n\
    \x05nonce\x18\x03\x20\x01(\x04R\x05nonceB\0\x12\x10\n\x02to\x18\x04\x20\
    \x01(\tR\x02toB\0\x12\x16\n\x05value\x18\x05\x20\x01(\tR\x05valueB\0\x12\
    \x1a\n\x07payload\x18\x06\x20\x01(\x0cR\x07payloadB\0\x12\x1d\n\tgas_lim\
    it\x18\x07\x20\x01(\x04R\x08gasLimitB\0\x12\x1d\n\tgas_price\x18\x08\x20\
    \x01(\tR\x08gasPriceB\0\x12\x17\n\x06hub_id\x18\t\x20\x01(\tR\x05hubIdB\
    \0\x12\x1b\n\x08chain_id\x18\n\x20\x01(\tR\x07chainIdB\0\x12+\n\x08reser\
    ves\x18\x0b\x20\x01(\x0b2\r.ExtendedDataR\x08reservesB\0:\0\"\xe8\x01\n\
    \x0fTransactionSign\x120\n\x0btransaction\x18\x01\x20\x01(\x0b2\x0c.Tran\
    sactionR\x0btransactionB\0\x12,\n\nsignatures\x18\x02\x20\x03(\x0b2\n.Si\
    gnatureR\nsignaturesB\0\x12>\n\x0bsource_type\x18\x04\x20\x01(\x0e2\x1b.\
    TransactionSign.SourceTypeR\nsourceTypeB\0\"3\n\nSourceType\x12\x0b\n\
    \x07JSONRPC\x10\0\x12\x07\n\x03P2P\x10\x01\x12\r\n\tWEBSOCKET\x10\x02\
    \x1a\0:\0\"o\n\x17TransactionSignBrodcast\x12\x1a\n\x07batchid\x18\x01\
    \x20\x01(\tR\x07batchidB\0\x126\n\x0ctransactions\x18\x02\x20\x03(\x0b2\
    \x10.TransactionSignR\x0ctransactionsB\0:\0\"\x9c\x01\n\x14TransactionSi\
    gnStore\x12=\n\x10transaction_sign\x18\x01\x20\x01(\x0b2\x10.Transaction\
    SignR\x0ftransactionSignB\0\x12C\n\x12transaction_result\x18\x02\x20\x01\
    (\x0b2\x12.TransactionResultR\x11transactionResultB\0:\0\"\xa7\x01\n\x08\
    Contract\x12\x14\n\x04name\x18\x01\x20\x01(\tR\x04nameB\0\x12\x14\n\x04c\
    ode\x18\x02\x20\x01(\x0cR\x04codeB\0\x12\x1a\n\x07creator\x18\x04\x20\
    \x01(\tR\x07creatorB\0\x12,\n\x04kind\x18\x05\x20\x01(\x0e2\x16.Contract\
    .ContractTypeR\x04kindB\0\"#\n\x0cContractType\x12\x07\n\x03EVM\x10\0\
    \x12\x08\n\x04WASM\x10\x01\x1a\0:\0\"\xc9\x01\n\x07Account\x12\x1a\n\x07\
    address\x18\x01\x20\x01(\tR\x07addressB\0\x12\x16\n\x05nonce\x18\x02\x20\
    \x01(\x04R\x05nonceB\0\x12\x1a\n\x07balance\x18\x03\x20\x01(\tR\x07balan\
    ceB\0\x12%\n\rmetadata_hash\x18\x04\x20\x01(\x0cR\x0cmetadataHashB\0\x12\
    '\n\x08contract\x18\x05\x20\x01(\x0b2\t.ContractR\x08contractB\0\x12\x1c\
    \n\x08document\x18\x06\x20\x01(\tR\x08documentB\0:\0\"Z\n\tSyncChain\x12\
    \x18\n\x06height\x18\x01\x20\x01(\x03R\x06heightB\0\x12\x14\n\x04hash\
    \x18\x02\x20\x01(\x03R\x04hashB\0\x12\x1b\n\x08chain_id\x18\x03\x20\x01(\
    \tR\x07chainIdB\0:\0\"`\n\x0fSyncChainStatus\x12\x18\n\x06height\x18\x01\
    \x20\x01(\x03R\x06heightB\0\x12\x14\n\x04hash\x18\x02\x20\x01(\tR\x04has\
    hB\0\x12\x1b\n\x08chain_id\x18\x03\x20\x01(\tR\x07chainIdB\0:\0\"\x93\
    \x01\n\x10SyncBlockRequest\x12\x16\n\x05begin\x18\x01\x20\x01(\x03R\x05b\
    eginB\0\x12\x12\n\x03end\x18\x02\x20\x01(\x03R\x03endB\0\x12\x14\n\x04ha\
    sh\x18\x03\x20\x01(\tR\x04hashB\0\x12\x1b\n\x08chain_id\x18\x04\x20\x01(\
    \tR\x07chainIdB\0\x12\x1e\n\trequestid\x18\x05\x20\x01(\x03R\trequestidB\
    \0:\0\"\xa9\x01\n\x11SyncBlockResponse\x12\x18\n\x06number\x18\x01\x20\
    \x01(\x03R\x06numberB\0\x12\x1e\n\trequestid\x18\x02\x20\x01(\x03R\trequ\
    estidB\0\x12\x18\n\x06finish\x18\x03\x20\x01(\x08R\x06finishB\0\x12\x1b\
    \n\x08chain_id\x18\x04\x20\x01(\tR\x07chainIdB\0\x12!\n\x06blocks\x18\
    \x05\x20\x03(\x0b2\x07.LedgerR\x06blocksB\0:\0*;\n\x0fTransactionType\
    \x12\x0c\n\x08EVM_GENO\x10\0\x12\x0e\n\nETH_LEGACY\x10\x01\x12\x08\n\x04\
    WASM\x10\x02\x1a\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
